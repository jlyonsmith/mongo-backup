{"version":3,"sources":["../src/MongoBackupTool.js"],"names":["MongoBackupTool","constructor","log","findTool","name","paths","foundPath","path","fullPath","join","existsSync","Error","run","argv","options","boolean","string","alias","args","command","_","version","info","help"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,MAAMA,eAAN,CAAsB;AAC3BC,cAAYC,GAAZ,EAAiB;AACf,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAED,SAAOC,QAAP,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3B,QAAIC,YAAY,IAAhB;;AAEA,SAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AACtB,UAAIG,WAAWD,KAAKE,IAAL,CAAUF,IAAV,EAAgBH,IAAhB,CAAf;;AAEA,UAAI,aAAGM,UAAH,CAAcF,QAAd,CAAJ,EAA6B;AAC3BF,oBAAYE,QAAZ;AACA;AACD;AACF;;AAED,QAAI,CAACF,SAAL,EAAgB;AACd,YAAM,IAAIK,KAAJ,CAAW,wBAAuBP,IAAK,GAAvC,CAAN;AACD;AACF;;AAED,QAAMQ,GAAN,CAAUC,IAAV,EAAgB;AACd,UAAMC,UAAU;AACdC,eAAS,CAAE,MAAF,EAAU,SAAV,CADK;AAEdC,cAAQ,CAAE,SAAF,EAAa,QAAb,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,KAAvC,EAA8C,SAA9C,CAFM;AAGdC,aAAO;AACL,aAAK,SADA;AAEL,aAAK,QAFA;AAGL,aAAK,KAHA;AAIL,aAAK,KAJA;AAKL,aAAK;AALA;AAHO,KAAhB;AAWA,SAAKC,IAAL,GAAY,wBAAUL,IAAV,EAAgBC,OAAhB,CAAZ;;AAEA,UAAMK,UAAU,KAAKD,IAAL,CAAUE,CAAV,CAAY,CAAZ,CAAhB;;AAEA,QAAI,KAAKF,IAAL,CAAUG,OAAd,EAAuB;AACrB,WAAKnB,GAAL,CAASoB,IAAT,CAAe,GAAD,oBAAe,EAA7B;AACA,aAAO,CAAP;AACD;;AAED,QAAI,KAAKJ,IAAL,CAAUK,IAAV,IAAkB,CAACJ,OAAvB,EAAgC;AAC9B,WAAKjB,GAAL,CAASoB,IAAT,CAAe;;;;;;;;;;;;;;;;CAAf;AAiBA,apN0B;QAAhBtB,e,GAAAA,e","file":"MongoBackupTool.js","sourcesContent":["import parseArgs from 'minimist'\nimport { fullVersion } from './version'\nimport util from 'util'\nimport path from 'path'\nimport process from 'process'\nimport temp from 'temp'\nimport fs from 'fs'\n\nexport class MongoBackupTool {\n  constructor(log) {\n    this.log = log\n  }\n\n  static findTool(name, paths) {\n    let foundPath = null\n\n    for (let path of paths) {\n      let fullPath = path.join(path, name)\n\n      if (fs.existsSync(fullPath)) {\n        foundPath = fullPath\n        break\n      }\n    }\n\n    if (!foundPath) {\n      throw new Error(`Unable to find tool '${name}'`)\n    }\n  }\n\n  async run(argv) {\n    const options = {\n      boolean: [ 'help', 'version' ],\n      string: [ 'profile', 'bucket', 'max', 'mongo', 'api', 'channel' ],\n      alias: {\n        'p': 'profile',\n        'b': 'bucket',\n        'n': 'max',\n        't': 'api',\n        'c': 'channel'\n      }\n    }\n    this.args = parseArgs(argv, options)\n\n    const command = this.args._[0]\n\n    if (this.args.version) {\n      this.log.info(`${fullVersion}`)\n      return 0\n    }\n\n    if (this.args.help || !command) {\n      this.log.info(`\nusage: mongo-backup [options]\n\ndescription:\n  Backup a MongoDB database to an Amazon S3 bucket, delete older archives,\n  and notify a Slack channel of status.\n\noptions:\n  [--profile | -p] PROFILE        AWS profile\n  [--bucket | -b] BUCKET_NAME     AWS bucket\n  [--max | -n] MAX_BACKUPS        Maximum number of backups to keep\n  [--mongo | -m] MONGO_URI        Full URI of MongoDB to backup\n  [--api | -t] SLACK_API_TOKEN    Slack API token\n  [--channel | -c] SLACK_CHANNEL  Slack channel\n  --help                          Shows this help\n  --version                       Shows the tool version\n`)\n      return 0\n    }\n\n    // main do\n    //   profile = options[:profile]\n    //   bucket_name = options[:bucket]\n    //   max_backups = options[:max].to_i\n    //   mongo_path = options[:mongo]\n    //   slack_api_token = options[:api]\n    //   slack_channel = options[:channel]\n    //\n    //   if profile.nil?\n    //     exit_now! \"Must specify AWS profile\"\n    //   end\n    //\n    //   if bucket_name.nil?\n    //     exit_now! \"Must specify AWS bucket name\"\n    //   end\n    //\n    //   if max_backups.nil? or max_backups == 0\n    //     max_backups = 20\n    //     puts \"Max backups is #{max_backups}\"\n    //   end\n    //\n    //   if mongo_path.nil?\n    //     exit_now! \"Must specify a database to backup!\"\n    //   end\n    //\n    //   if slack_api_token.nil? or slack_channel.nil?\n    //     puts \"WARNING: No Slack API and/or channel token given, no notification will be sent\"\n    //   end\n    //\n    //   mongo_uri = Mongo::URI.new(mongo_path)\n    //   database = mongo_uri.database\n    //   user = mongo_uri.credentials[:user]\n    //   password = mongo_uri.credentials[:password]\n    //   mongo_server = mongo_uri.servers[0]\n    //\n    //   mongodump_tool = find_tool('mongodump', ['/usr/bin', '/usr/local/bin'])\n    //   aws_tool = find_tool('aws', ['/usr/bin', '/usr/local/bin'])\n    //   scutil_tool = find_tool('scutil', ['/usr/sbin'])\n    //   tar_tool = find_tool('tar', ['/usr/bin'])\n    //\n    //   backup_status = :failed\n    //\n    //   Dir.mktmpdir do |dump_dir_name|\n    //     begin\n    //       local_host_name = `#{scutil_tool} --get LocalHostName`.strip\n    //\n    //       puts \"Backing up mongodb://#{mongo_server}/#{database} from #{local_host_name}\"\n    //\n    //       if !(user.nil? and password.nil?)\n    //         `#{mongodump_tool} -h #{mongo_server} -u #{user} -p #{password} -d #{database} -o #{dump_dir_name}`\n    //       else\n    //         `#{mongodump_tool} -h #{mongo_server} -d #{database} -o #{dump_dir_name}`\n    //       end\n    //\n    //       if $? != 0\n    //         raise \"Unable to create dump of mongodb://#{mongo_server}/#{database}\"\n    //       end\n    //\n    //       date_time = DateTime.now.strftime(\"%Y%m%d-%H%M%SZ\")\n    //\n    //       backup_filename = \"#{local_host_name}-#{database}-#{date_time}.tar.gz\"\n    //\n    //       `cd #{dump_dir_name}; #{tar_tool} -czvf #{backup_filename} #{database}/*`\n    //\n    //       if $? != 0\n    //         raise \"Unable to create tar zip file '#{backup_filename}'\"\n    //       end\n    //\n    //       `cd #{dump_dir_name}; #{aws_tool} s3 cp #{backup_filename} s3://#{bucket_name}/ --profile #{profile}`\n    //\n    //       if $? != 0\n    //         raise \"Unable to upload '#{backup_filename}' to s3://#{bucket_name}/\"\n    //       end\n    //\n    //       # Reduce backups to desired maximum\n    //       backup_filenames = `#{aws_tool} s3 ls s3://#{bucket_name} --profile #{profile}`.split('\\n')\n    //\n    //       if $? != 0\n    //         raise \"Unable to get list of existing backups from s3://#{bucket_name}\"\n    //       end\n    //\n    //       # backup_filenames = %w(\n    //       #   'host-database-20160624-002055Z.tar.gz',\n    //       #   'host-database-20160620-002055Z.tar.gz',\n    //       #   'host-database-20160621-002055Z.tar.gz',\n    //       #   'host-database-20160708-002055Z.tar.gz',\n    //       #   'host-database-20160601-002055Z.tar.gz.save',\n    //       # )\n    //       backup_filenames.sort!\n    //       backup_filenames.delete_if { |f| f.match(/save/) }\n    //       num_backups_to_delete = backup_filenames.count - max_backups\n    //\n    //       if num_backups_to_delete > 0\n    //         (0...num_backups_to_delete).each { |i|\n    //           `#{aws_tool} s3 rm s3://#{bucket_name}/#{backup_filenames[i]} --profile #{profile}`\n    //\n    //           if $? != 0\n    //             puts \"WARNING: Unable to delete s3://#{bucket_name}/#{backup_filenames[i]}\"\n    //           end\n    //         }\n    //       end\n    //\n    //       backup_status = :succeeded\n    //     ensure\n    //       Slack.configure do |config|\n    //         config.token = slack_api_token\n    //       end\n    //\n    //       unless slack_api_token.nil? or slack_channel.nil?\n    //         if backup_status == :succeeded\n    //           message = \"MongoDB backup complete\"\n    //           attachments = [\n    //             {\n    //                 \"color\": \"good\",\n    //                 \"title\": \"MongoDB Backup Succeeded\",\n    //                 \"text\": \"A backup of database mongodb://#{mongo_server}/#{database} was made from #{local_host_name} to s3://#{bucket_name}/#{backup_filename}\",\n    //                 \"ts\": Time.now.utc.to_i\n    //             }\n    //           ]\n    //         else\n    //           message = \"MongoDB backup failed\"\n    //           attachments = [\n    //               {\n    //                   \"color\": \"danger\",\n    //                   \"title\": \"MongoDB Backup Failed\",\n    //                   \"text\": \"A backup of database mongodb://#{mongo_server}/#{database} from #{local_host_name} failed.\",\n    //                   \"ts\": Time.now.utc.to_i\n    //               }\n    //           ]\n    //         end\n    //         begin\n    //           slack = Slack::Web::Client.new\n    //           slack.chat_postMessage(channel: slack_channel, text: message, attachments: attachments, as_user: true)\n    //         rescue\n    //           puts \"Unable to send Slack message to #{slack_channel}\"\n    //         end\n    //       end\n    //     end\n    //   end\n    //\n    //   if backup_status == :succeeded\n    //     puts \"Backup was successful\"\n    //   else\n    //     puts \"Backup failed\"\n    //   end\n    // end\n\n    return 0\n  }\n}\n"]}